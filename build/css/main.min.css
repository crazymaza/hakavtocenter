/* Document
 * ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 */
:where(html) {
  line-height: 1.15; /* 1 */
}
/* Sections
 * ========================================================================== */
/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Edge, Firefox, and Safari.
 */
:where(h1) {
  margin-block-start: 0.67em;
  margin-block-end: 0.67em;
  font-size: 2em;
}
/* Grouping content
 * ========================================================================== */
/**
 * Remove the margin on nested lists in Chrome, Edge, and Safari.
 */
:where(dl, ol, ul) :where(dl, ol, ul) {
  margin-block-start: 0;
  margin-block-end: 0;
}
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Correct the inheritance of border color in Firefox.
 */
:where(hr) {
  box-sizing: content-box; /* 1 */
  height: 0; /* 1 */
  color: inherit; /* 2 */
}
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
:where(pre) {
  font-size: 1em; /* 2 */
  font-family: monospace, monospace; /* 1 */
}
/* Text-level semantics
 * ========================================================================== */
/**
 * Add the correct text decoration in Safari.
 */
:where(abbr[title]) {
  text-decoration: underline;
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
}
/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
:where(b, strong) {
  font-weight: bolder;
}
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
:where(code, kbd, samp) {
  font-size: 1em; /* 2 */
  font-family: monospace, monospace; /* 1 */
}
/**
 * Add the correct font size in all browsers.
 */
:where(small) {
  font-size: 80%;
}
/* Tabular data
 * ========================================================================== */
/**
 * 1. Correct table border color in Chrome, Edge, and Safari.
 * 2. Remove text indentation from table contents in Chrome, Edge, and Safari.
 */
:where(table) {
  border-color: currentColor; /* 1 */
  text-indent: 0; /* 2 */
}
/* Forms
 * ========================================================================== */
/**
 * Remove the margin on controls in Safari.
 */
:where(button, input, select) {
  margin: 0;
}
/**
 * Remove the inheritance of text transform in Firefox.
 */
:where(button) {
  text-transform: none;
}
/**
 * Correct the inability to style buttons in iOS and Safari.
 */
:where(button, input:is([type="button" i], [type="reset" i], [type="submit" i])) {
  -webkit-appearance: button;
}
/**
 * Add the correct vertical alignment in Chrome, Edge, and Firefox.
 */
:where(progress) {
  vertical-align: baseline;
}
/**
 * Remove the inheritance of text transform in Firefox.
 */
:where(select) {
  text-transform: none;
}
/**
 * Remove the margin in Firefox and Safari.
 */
:where(textarea) {
  margin: 0;
}
/**
 * 1. Correct the odd appearance in Chrome, Edge, and Safari.
 * 2. Correct the outline style in Safari.
 */
:where(input[type="search" i]) {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}
/**
 * Correct the cursor style of increment and decrement buttons in Safari.
 */
::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}
/**
 * Correct the text style of placeholders in Chrome, Edge, and Safari.
 */
::-webkit-input-placeholder {
  color: inherit;
  opacity: 0.54;
}
/**
 * Remove the inner padding in Chrome, Edge, and Safari on macOS.
 */
::-webkit-search-decoration {
  -webkit-appearance: none;
}
/**
 * 1. Correct the inability to style upload buttons in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}
/**
 * Remove the inner border and padding of focus outlines in Firefox.
 */
:where(button, input:is([type="button" i], [type="color" i], [type="reset" i], [type="submit" i]))::-moz-focus-inner {
  padding: 0;
  border-style: none;
}
/**
 * Restore the focus outline styles unset by the previous rule in Firefox.
 */
:where(button, input:is([type="button" i], [type="color" i], [type="reset" i], [type="submit" i]))::-moz-focusring {
  outline: 1px dotted ButtonText;
}
/**
 * Remove the additional :invalid styles in Firefox.
 */
:where(:-moz-ui-invalid) {
  box-shadow: none;
}
/* Interactive
 * ========================================================================== */
/*
 * Add the correct styles in Safari.
 */
:where(dialog) {
  position: absolute;
  right: 0;
  left: 0;
  width: -moz-fit-content;
  width: fit-content;
  height: -moz-fit-content;
  height: fit-content;
  margin: auto;
  padding: 1em;
  border: solid;
  background-color: white;
  color: black;
}
:where(dialog:not([open])) {
  display: none;
}
/*
 * Add the correct display in all browsers.
 */
:where(summary) {
  display: list-item;
}
a:not([class]) {
  -webkit-text-decoration-skip: ink;
          text-decoration-skip-ink: auto;
}

::selection {
  background: #b3d4fc;
  text-shadow: none;
}

hr {
  display: block;
  height: 1px;
  margin: 1em 0;
  padding: 0;
  border: 0;
  border-top: 1px solid #ccc;
}

audio,
canvas,
iframe,
img,
svg,
video {
  vertical-align: middle;
}

input,
button,
textarea,
select {
  font: inherit;
}

fieldset {
  margin: 0;
  padding: 0;
  border: 0;
}

textarea {
  resize: vertical;
}

.logo {
  flex-grow: 1;
  color: #fff;
  font-style: normal;
  font-weight: 700;
  font-size: 1.5rem;
  line-height: 1.21;
  text-decoration: none;
}

.title__text {
  color: #FF8A00;
  font-style: normal;
  font-weight: 700;
  font-size: calc( 1rem + (36 - 16) * ((100vw - 23.4375rem) / (1440 - 375)));
  line-height: NaN;
  text-transform: uppercase;
}

.block_description {
  color: #fff;
  font-style: normal;
  font-weight: 500;
  font-size: calc( 0.75rem + (14 - 12) * ((100vw - 23.4375rem) / (1440 - 375)));
  line-height: 2.5rem;
  text-transform: uppercase;
}

.btn {
  box-sizing: border-box;
  max-width: 203px;
  max-height: 61px;
  padding: 16px 66px;
  border: none;
  border-radius: 8px;
  outline: none;
  background: #FF8A00;
  color: #fff;
  font-style: normal;
  font-weight: 700;
  font-size: 0.875rem;
  cursor: pointer;
  transition: 0.3s ease;
}

.btn:hover, .btn:focus {
  background: #ffa133;
}

.btn:active {
  background: #ffb966;
  box-shadow: 0 0 10px 5px #FF8A00;
}

.btn:focus {
  box-shadow: 0 0 10px 1px #FF8A00;
}

/* Slider */
.slick-slider {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  -ms-touch-action: pan-y;
  -webkit-tap-highlight-color: transparent;
  box-sizing: border-box;
  display: block;
  position: relative;
  touch-action: pan-y;
  user-select: none;
}

.slick-list {
  -webkit-overflow-scrolling: touch;
  display: block;
  position: relative;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

.slick-list:focus {
  outline: none;
}

.slick-list.dragging {
  cursor: pointer;
  cursor: hand;
}

.slick-slider .slick-track,
.slick-slider .slick-list {
  transform: translate3d(0, 0, 0);
}

.slick-track {
  display: block;
  position: relative;
  top: 0;
  left: 0;
  margin-right: auto;
  margin-left: auto;
}

.slick-track:before, .slick-track:after {
  display: table;
  content: "";
}

.slick-track:after {
  clear: both;
}

.slick-loading .slick-track {
  visibility: hidden;
}

.slick-slide {
  display: none;
  height: 100%;
  min-height: 1px;
  float: left;
}

[dir="rtl"] .slick-slide {
  float: right;
}

.slick-slide img {
  display: block;
}

.slick-slide.slick-loading img {
  display: none;
}

.slick-slide.dragging img {
  pointer-events: none;
}

.slick-initialized .slick-slide {
  display: block;
}

.slick-loading .slick-slide {
  visibility: hidden;
}

.slick-vertical .slick-slide {
  display: block;
  height: auto;
  border: 1px solid transparent;
}

.slick-arrow.slick-hidden {
  display: none;
}

/**************************\
  Basic Modal Styles
\**************************/
.modal {
  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, ubuntu, roboto, noto, segoe ui, arial, sans-serif;
}

.modal__overlay {
  display: flex;
  z-index: 1;
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  align-items: center;
  justify-content: center;
  background: rgba(0, 0, 0, 0.6);
}

.modal__container {
  -webkit-overflow-scrolling: touch;
  box-sizing: border-box;
  max-width: 500px;
  max-height: 100vh;
  max-height: calc(var(--vh, 1vh) * 100);
  padding: 30px;
  overflow-y: auto;
  border-radius: 4px;
  background-color: #fff;
}

.modal__header {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.modal__title {
  box-sizing: border-box;
  margin-top: 0;
  margin-bottom: 0;
  color: #00449e;
  font-weight: 600;
  font-size: 1.25rem;
  line-height: 1.25;
}

.modal__close {
  border: 0;
  background: transparent;
}

.modal__header .modal__close:before {
  content: '\2715';
}

.modal__content {
  margin-top: 2rem;
  margin-bottom: 2rem;
  color: rgba(0, 0, 0, 0.8);
  line-height: 1.5;
}

.modal__btn {
  -webkit-appearance: button;
  -moz-osx-font-smoothing: grayscale;
  -webkit-backface-visibility: hidden;
  margin: 0;
  padding: 0.5rem 1rem;
  overflow: visible;
  transform: translateZ(0);
  border-width: 0;
  border-style: none;
  border-radius: 0.25rem;
  backface-visibility: hidden;
  background-color: #e6e6e6;
  color: rgba(0, 0, 0, 0.8);
  font-size: 0.875rem;
  line-height: 1.15;
  text-transform: none;
  cursor: pointer;
  transition: transform 0.25s ease-out;
  will-change: transform;
}

.modal__btn:focus, .modal__btn:hover {
  transform: scale(1.05);
}

.modal__btn-primary {
  background-color: #00449e;
  color: #fff;
}

/**************************\
  Demo Animation Style
\**************************/
@keyframes mmfadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes mmfadeOut {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}

@keyframes mmslideIn {
  from {
    transform: translateY(15%);
  }
  to {
    transform: translateY(0);
  }
}

@keyframes mmslideOut {
  from {
    transform: translateY(0);
  }
  to {
    transform: translateY(-10%);
  }
}

.micromodal-slide {
  display: none;
}

.micromodal-slide.is-open {
  display: block;
}

.micromodal-slide[aria-hidden='false'] .modal__overlay {
  animation: mmfadeIn 0.3s cubic-bezier(0, 0, 0.2, 1);
}

.micromodal-slide[aria-hidden='false'] .modal__container {
  animation: mmslideIn 0.3s cubic-bezier(0, 0, 0.2, 1);
}

.micromodal-slide[aria-hidden='true'] .modal__overlay {
  animation: mmfadeOut 0.3s cubic-bezier(0, 0, 0.2, 1);
}

.micromodal-slide[aria-hidden='true'] .modal__container {
  animation: mmslideOut 0.3s cubic-bezier(0, 0, 0.2, 1);
}

.micromodal-slide .modal__container,
.micromodal-slide .modal__overlay {
  -webkit-backface-visibility: hidden;
          backface-visibility: hidden;
  will-change: transform;
}

.icon-mono {
  fill: currentColor;
  display: inline-block;
  height: 1em;
}

.icon-facebook {
  width: 0.52632em;
  font-size: 1.9rem;
}

.icon-telegram {
  width: 1em;
  font-size: 18.947rem;
}

.icon-multi {
  display: inline-block;
  height: 1em;
}

.icon-js {
  width: 0.73052em;
  font-size: 30.8rem;
}

.nav__top {
  display: flex;
  z-index: 10;
  position: absolute;
  top: 10px;
  left: 0;
  flex-wrap: wrap;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  padding: 0 80px;
}

.nav__top nav .nav__list {
  display: flex;
  gap: 110px;
  list-style: none;
}

.nav__top nav .nav__list .list__item .item__link {
  color: #fff;
  font-style: normal;
  font-weight: 500;
  font-size: 1rem;
  line-height: 1.25;
  text-decoration: none;
  text-transform: uppercase;
  transition: .3s ease;
}

.nav__top nav .nav__list .list__item .item__link:hover {
  color: #ffa133;
}

.nav__top nav .nav__mobile {
  -webkit-overflow-scrolling: touch;
  display: none;
  z-index: 2;
  position: relative;
  width: 30px;
  height: 30px;
  margin-right: 20px;
  overflow: hidden;
}

.nav__top nav .nav__mobile.active {
  position: fixed;
  top: 10px;
}

.nav__top nav .nav__mobile.active .mobile__btn:nth-of-type(1) {
  display: none;
}

.nav__top nav .nav__mobile.active .mobile__btn:nth-of-type(2) {
  top: 50%;
  transform: translate(-50%, 0%) rotate(45deg);
}

.nav__top nav .nav__mobile.active .mobile__btn:nth-of-type(3) {
  top: 50%;
  transform: translate(-50%, 0%) rotate(-45deg);
}

.nav__top nav .nav__mobile.active .mobile__block {
  transform: translateX(0);
}

.nav__top nav .nav__mobile .mobile__btn {
  z-index: 10;
  position: absolute;
  top: 50%;
  left: 50%;
  width: 30px;
  height: 2px;
  transform: translate(-50%, -50%);
  background-color: #fff;
  transition: all 0.5s;
}

.nav__top nav .nav__mobile .mobile__btn:nth-of-type(2) {
  top: calc(50% - 7px);
}

.nav__top nav .nav__mobile .mobile__btn:nth-of-type(3) {
  top: calc(50% + 7px);
}

.nav__top nav .nav__mobile .mobile__block {
  -webkit-overflow-scrolling: touch;
  -webkit-backface-visibility: hidden;
  display: flex;
  position: fixed;
  top: 0;
  right: 0;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
  padding: 15px;
  overflow-y: hidden;
  transform: translateX(100%);
  backface-visibility: hidden;
  background: #995300;
  transition: transform 0.5s;
  will-change: transform;
}

.nav__top nav .nav__mobile .mobile__block .nav__list {
  display: flex;
  flex-direction: column;
  width: 100%;
  padding: 0;
  gap: 50px;
  list-style: none;
  text-align: center;
}

.nav__top nav .nav__mobile .mobile__block .nav__list .items__link {
  display: block;
  color: #fff;
  font-size: 1.875rem;
  line-height: 1.5;
  text-decoration: none;
  text-transform: uppercase;
}

.slider__first {
  position: relative;
  width: 100%;
  margin-bottom: calc( 30px + (180 - 30) * ((100vw - 370px) / (1440 - 370)));
}

.slider__first .slick-list {
  max-height: 100vh;
  max-height: calc(var(--vh, 1vh) * 100);
}

.slider__first .slick-list .slick-track {
  max-height: 100vh;
  max-height: calc(var(--vh, 1vh) * 100);
}

.slider__first .slick-list .slick-track .slide {
  max-height: 100vh;
  max-height: calc(var(--vh, 1vh) * 100);
}

.slider__first .slide .slide__img {
  width: 100%;
  height: 100%;
  filter: brightness(60%);
}

.slider__first .slide .left__text {
  position: absolute;
  top: 30%;
  left: 0;
  max-width: 847px;
  padding-left: 80px;
}

.slider__first .slide .left__text .slide__text {
  font-style: normal;
  font-weight: 700;
  font-size: calc( 1rem + (40 - 16) * ((100vw - 23.125rem) / (1440 - 370)));
  line-height: 1.49;
  text-transform: uppercase;
}

.slider__first .slide .left__text .slide__adress.block_description {
  font-style: normal;
  font-weight: 500;
  font-size: 1rem;
  line-height: 2.5;
  text-transform: uppercase;
}

.slider__first .slide .right__text {
  box-sizing: border-box;
  position: absolute;
  right: 80px;
  bottom: 10%;
  width: calc( 100px + (559.5 - 100) * ((100vw - 375px) / (1440 - 375)));
  padding-top: 40px;
  border-top: 3px solid #FF8A00;
  text-align: end;
}

.slider__first .slide .right__text p {
  margin: 0;
  font-style: normal;
  font-weight: 400;
  font-size: 1.125rem;
  line-height: 1.22;
  text-transform: uppercase;
}

.slider__first .slick-dots {
  display: flex;
  position: absolute;
  right: 80px;
  bottom: 40%;
  flex-direction: column;
  gap: 40px;
}

.slider__first .slick-dots li {
  position: relative;
  width: 8px;
  height: 8px;
  border: 1px solid #fff;
  border-radius: 50%;
  list-style: none;
  cursor: pointer;
}

.slider__first .slick-dots li button {
  display: none;
}

.slider__first .slick-dots .slick-active {
  border: 1px solid #FF8A00;
  background: #FF8A00;
}

.media {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: space-between;
  margin-bottom: calc( 50px + (160 - 50) * ((100vw - 375px) / (1440 - 375)));
  padding: 0 80px;
}

.media .title__text {
  max-width: 648px;
}

.media .media__text_block {
  max-width: 665px;
}

.media .media__text_block .media__text {
  margin: 10px;
}

.tahograph {
  display: flex;
  position: relative;
  align-items: center;
  justify-content: space-between;
  max-height: 760px;
  margin-bottom: calc( 50px + (160 - 50) * ((100vw - 375px) / (1440 - 375)));
  padding-right: 80px;
  gap: calc( 30px + (150 - 30) * ((100vw - 375px) / (1440 - 375)));
}

.tahograph .tahograph__img {
  max-width: 50%;
  max-height: 760px;
}

.tahograph .tahograph__img img {
  width: 100%;
  height: 100%;
}

.tahograph .tahograph__text {
  display: flex;
  flex-direction: column;
  max-width: 600px;
  gap: 10px;
}

.tahograph .tahograph__text .tahograph__title {
  margin-bottom: calc( 10px + (100 - 10) * ((100vw - 375px) / (1440 - 375)));
}

.tahograph .tahograph__text .tahograph__link {
  color: #FF8A00;
  font-style: normal;
  font-weight: 500;
  font-size: 0.875rem;
  line-height: 2.86;
  -webkit-text-decoration-line: underline;
          text-decoration-line: underline;
  text-transform: uppercase;
}

.glonas {
  display: flex;
  position: relative;
  align-items: center;
  justify-content: space-between;
  max-height: 760px;
  margin-bottom: calc( 50px + (160 - 50) * ((100vw - 375px) / (1440 - 375)));
  padding-left: 80px;
  gap: 30px;
}

.glonas .glonas__img {
  max-width: 50%;
  max-height: 760px;
}

.glonas .glonas__img img {
  width: 100%;
  height: 100%;
}

.glonas .glonas__text {
  display: flex;
  z-index: 1;
  flex-direction: column;
  max-width: 650px;
  gap: 10px;
}

.glonas .glonas__text .glonas__title {
  margin-bottom: calc( 10px + (100 - 10) * ((100vw - 375px) / (1440 - 375)));
}

.punktTo {
  display: flex;
  position: relative;
  align-items: center;
  justify-content: space-between;
  max-height: 760px;
  margin-bottom: calc( 50px + (160 - 50) * ((100vw - 375px) / (1440 - 375)));
  padding-right: 80px;
  gap: calc( 30px + (150 - 30) * ((100vw - 375px) / (1440 - 375)));
}

.punktTo .punktTo__img {
  max-width: 50%;
  max-height: 760px;
}

.punktTo .punktTo__img img {
  width: 100%;
  height: 100%;
}

.punktTo .punktTo__text {
  display: flex;
  flex-direction: column;
  max-width: 600px;
  gap: 10px;
}

.punktTo .punktTo__text .punktTo__title {
  margin-bottom: calc( 10px + (100 - 10) * ((100vw - 375px) / (1440 - 375)));
}

.slider__second {
  position: relative;
  width: 100%;
  max-height: 480px;
  margin-bottom: calc( 30px + (180 - 30) * ((100vw - 370px) / (1440 - 370)));
  padding-bottom: 66px;
}

.slider__second .slick-list .slick-track .slick-slide {
  margin: 0 10px;
}

.slider__second .slick-list .slick-track .slick-slide.slick-center .slide {
  width: 870px;
}

.slider__second .slick-list .slick-track .slick-slide .slide {
  transition: 0.3s ease-in;
}

.slider__second .slick-list .slide {
  max-width: 870px;
}

.slider__second .slick-list .slide .slide__img {
  width: 100%;
  height: 100%;
}

.slick-arrow {
  z-index: 10;
  position: absolute;
  bottom: 0;
  width: 10px;
  height: 25px;
  border: none;
  background: transparent;
  font-size: 0;
  cursor: pointer;
}

.slick-prev {
  left: 46%;
  width: 30px;
  height: 30px;
  background-image: url("/img/icons/right-arrow.svg");
  background-position: 45% 45%;
  background-size: cover;
  background-repeat: no-repeat;
  transition: all 0.4s ease 0s;
}

.slick-next {
  right: 46%;
  width: 30px;
  height: 30px;
  background-image: url("/img/icons/left-arrow.svg");
  background-position: 55% 45%;
  background-size: cover;
  background-repeat: no-repeat;
}

.slick-dots {
  display: flex;
  position: absolute;
  bottom: 0;
  align-items: center;
  justify-content: center;
  width: 100%;
  margin: 0;
  padding: 3px;
  list-style: none;
  text-align: center;
}

.slick-dots li {
  display: inline-block;
  position: relative;
  width: 15px;
  height: 15px;
  margin: 0 5px;
  padding: 0;
  border-radius: 50%;
  background-color: #b3b3b3;
  cursor: pointer;
}

.slick-dots li button {
  display: block;
  width: 20px;
  height: 20px;
  padding: 5px;
  border: 0;
  outline: none;
  background: transparent;
  color: transparent;
  font-size: 0;
  line-height: 0;
  cursor: pointer;
}

.slick-dots li.slick-active {
  box-shadow: inset 0 0 5px 3px #000;
}

.page-main h1 {
  -webkit-backface-visibility: hidden;
          backface-visibility: hidden;
  font-size: 2.625rem;
  line-height: 1.33;
  transition: color 0.5s cubic-bezier(0.445, 0.05, 0.55, 0.95);
  will-change: color;
}

.page-main h1:hover,.page-main h1:focus {
  color: blue;
}

.aspect-ratio-16-9 {
  box-sizing: border-box;
  position: relative;
  width: 100%;
  max-width: 800px;
  border: 1px solid #FF8A00;
}

.aspect-ratio-16-9 > * {
  box-sizing: border-box;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

.aspect-ratio-16-9:before {
  box-sizing: border-box;
  display: block;
  position: relative;
  padding-top: 56.25%;
  content: "";
}

.aspect-ratio-16-9 img {
  display: block;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.color-function {
  width: 150px;
  height: 150px;
  border: 2px solid black;
  background: rgb(255, 128, 0);
}

.color-with-transparency {
  width: 150px;
  height: 150px;
  border: 2px solid black;
  background: rgba(0, 128, 0, 0.5);
}

.smooth-gradient {
  width: 150px;
  height: 150px;
  border: 2px solid black;
  background: radial-gradient(circle at top right, hsl(0, 100%, 50%), hsl(351.5, 100%, 49.51%) 9.99%, hsl(343.03, 100%, 48.11%) 19.07%, hsl(334.18, 100%, 45.93%) 27.44%, hsl(324.5, 100%, 43.03%) 35.26%, hsl(313.41, 100%, 39.49%) 42.72%, hsl(300, 100%, 35.36%) 50%, hsl(286.59, 100%, 39.49%) 57.28%, hsl(275.5, 100%, 43.03%) 64.74%, hsl(265.82, 100%, 45.93%) 72.56%, hsl(256.97, 100%, 48.11%) 80.93%, hsl(248.5, 100%, 49.51%) 90.01%, hsl(240, 100%, 50%));
}

.border-align-outside {
  width: 150px;
  height: 150px;
  box-shadow: inset 0 0 0 2px black;
}

.border-align-inside {
  width: 150px;
  height: 150px;
  box-shadow: 0 0 0 2px black;
}

.scrollbar-example::-webkit-scrollbar-thumb {
  background-color: red;
}

.scrollbar-example::-webkit-scrollbar-track {
  background-color: white;
}

.scrollbar-example::-webkit-scrollbar-corner {
  background-color: white;
}

.scrollbar-example::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

.scrollbar-example {
  -ms-overflow-style: auto;
  -webkit-overflow-scrolling: touch;
  width: 200px;
  height: 200px;
  overflow: auto;
  scrollbar-color: red white;
  scrollbar-width: thin;
}

.animation-test {
  width: 50px;
  height: 50px;
  margin-top: 50px;
  border-radius: 50%;
  background-color: red;
  animation: bounce 1.5s infinite;
}

.animation-magic-test {
  width: 50px;
  height: 50px;
  margin-top: 50px;
  margin-bottom: 50px;
  border-radius: 50%;
  background-color: red;
  animation: twisterInDown 1.5s infinite;
  animation-direction: alternate-reverse;
}

@keyframes twisterInDown { 0% { transform: scale(0, 0) rotate(360deg) translateY(-100%); transform-origin: 0 100%; opacity: 0; } 30% { transform: scale(0, 0) rotate(360deg) translateY(-100%); transform-origin: 0 100%; } 100% { transform: scale(1, 1) rotate(0deg) translateY(0%); transform-origin: 100% 100%; opacity: 1;}}

.isosceles-triangle {
  width: 0;
  height: 0;
  border-width: 0 75px 150px;
  border-style: solid;
  border-color: transparent;
  border-bottom-color: black;
}

.right-isosceles-triangle {
  width: 0;
  height: 0;
  border-width: 75px 75px 0;
  border-style: solid;
  border-color: transparent;
  border-top-color: red;
}

.equilateral-triangle {
  width: 0;
  height: 0;
  border-width: 75px 129.90381px 75px 0;
  border-style: solid;
  border-color: transparent;
  border-right-color: green;
}

.css-lock {
  font-size: calc( 1rem + (24 - 16) * ((100vw - 40rem) / (1440 - 640)));
}

.test-media {
  width: 150px;
  height: 150px;
  border: 2px solid black;
  background-color: green;
}
.icon-mono {
  -webkit-backface-visibility: hidden;
          backface-visibility: hidden;
  color: #000;
  font-size: 3.125rem;
  transition: color 0.2s ease;
  will-change: color;
}

.icon-mono:hover,.icon-mono:focus {
  color: red;
}

.icon-multi {
  font-size: 3.125rem;
}

.lost-example {
  padding-top: 50px;
  padding-bottom: 50px;
}

.lost-example *:not(input):not(textarea):not(select) {
  background-color: rgba(0, 0, 255, 0.1);
}

.lost-example__wrapper {
  max-width: 980px;
  margin-right: auto;
  margin-left: auto;
}

.lost-example__wrapper:before {
  display: table;
  content: '';
}

.lost-example__wrapper:after {
  display: table;
  clear: both;
  content: '';
}

.lost-example__wrapper:before {
  display: table;
  content: '';
}

.lost-example__wrapper:after {
  display: table;
  clear: both;
  content: '';
}

.lost-example__col {
  width: calc(99.9% * 1/3 - (30px - 30px * 1/3));
}

.lost-example__col:nth-child(1n) {
  margin-right: 30px;
  float: left;
  clear: none;
}

.lost-example__col:last-child {
  margin-right: 0;
}

.lost-example__col:nth-child(3n) {
  margin-right: 0;
  float: right;
}

.lost-example__col:nth-child(3n + 1) {
  clear: both;
}

img:not([alt]),
label:not([for]),
input[type='submit']:not([value]) {
  outline: 2px solid red;
}

ul > *:not(li),
ol > *:not(li),
dl > *:not(dt):not(dd) {
  outline: 2px solid red;
}

@keyframes bounce { from, 20%, 53%, 80%, to {transform: translate3d(0,0,0);animation-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);}40%, 43% {transform: translate3d(0, -30px, 0);animation-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);}70% {transform: translate3d(0, -15px, 0);animation-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);}90% {transform: translate3d(0,-4px,0);}}

@media (min-width: 415px) and (max-width: 1024px) {
  .test-media {
    width: 200px;
    height: 200px;
    background-color: red;
  }
}

@media (min-width: 1440px) {
  .title__text {
    font-size: 2.25rem;
  }
  .block_description {
    font-size: 0.875rem;
  }
  .slider__first {
    margin-bottom: 180px;
  }
  .slider__first .slide .left__text .slide__text {
    font-size: 2.5rem;
  }
  .slider__first .slide .right__text {
    width: 559.5px;
  }
  .media {
    margin-bottom: 160px;
  }
  .tahograph {
    gap: 150px;
  }
  .tahograph {
    margin-bottom: 160px;
  }
  .tahograph .tahograph__text .tahograph__title {
    margin-bottom: 100px;
  }
  .glonas {
    margin-bottom: 160px;
  }
  .glonas .glonas__text .glonas__title {
    margin-bottom: 100px;
  }
  .punktTo {
    gap: 150px;
  }
  .punktTo {
    margin-bottom: 160px;
  }
  .punktTo .punktTo__text .punktTo__title {
    margin-bottom: 100px;
  }
  .slider__second {
    margin-bottom: 180px;
  }
  .css-lock {
    font-size: 1.5rem;
  }
}

@media (max-width: 1024px) {
  .nav__top {
    padding: 0 40px;
  }
  .nav__top nav .nav__list {
    gap: 70px;
  }
  .slider__first .slide .left__text .slide__text {
    line-height: 1.35;
  }
  .slider__first .slide .right__text {
    padding-top: 20px;
  }
  .slider__first .slick-dots {
    right: 35%;
    bottom: 5%;
    flex-direction: row;
  }
  .lost-example__col {
    width: calc(99.9% * 1/1 - (30px - 30px * 1/1));
  }
  .lost-example__col:nth-child(1n) {
    margin-right: 30px;
    float: left;
    clear: none;
  }
  .lost-example__col:last-child {
    margin-right: 0;
  }
  .lost-example__col:nth-child(1n) {
    margin-right: 0;
    float: right;
  }
  .lost-example__col:nth-child(1n + 1) {
    clear: both;
  }
}

@media (max-width: 800px) {
  .nav__top nav .nav__list {
    display: none;
  }
  .nav__top nav .nav__mobile {
    display: block;
  }
  .slider__first .slide .left__text .slide__adress.block_description {
    font-size: 0.75rem;
  }
}

@media (max-width: 768px) {
  .btn {
    align-self: center;
  }
  .slider__first .slide .right__text {
    display: none;
  }
  .tahograph {
    padding-right: 0;
  }
  .tahograph .tahograph__img {
    max-width: -moz-fit-content;
    max-width: fit-content;
    filter: brightness(60%);
  }
  .tahograph .tahograph__text {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 90%;
    transform: translate(-50%, -50%);
  }
  .glonas {
    padding-left: 0;
  }
  .glonas .glonas__img {
    max-width: -moz-fit-content;
    max-width: fit-content;
    filter: brightness(60%);
  }
  .glonas .glonas__text {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 90%;
    transform: translate(-50%, -50%);
  }
  .punktTo {
    padding-right: 0;
  }
  .punktTo .punktTo__img {
    max-width: -moz-fit-content;
    max-width: fit-content;
    filter: brightness(60%);
  }
  .punktTo .punktTo__text {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 90%;
    transform: translate(-50%, -50%);
  }
}

@media (max-width: 640px) {
  .css-lock {
    font-size: 1rem;
  }
}

@media (max-width: 600px) {
  .slider__first .slide .left__text .slide__adress.block_description {
    font-size: 0.6875rem;
  }
}

@media (max-width: 550px) {
  .block_description {
    line-height: 1.5rem;
  }
}

@media (max-width: 440px) {
  .slider__first .slide .left__text {
    top: 20%;
    padding-left: 40px;
  }
  .media {
    margin-bottom: 50px;
    padding-right: 40px;
    padding-left: 40px;
  }
}

@media (max-width: 375px) {
  .title__text {
    font-size: 1rem;
  }
  .block_description {
    font-size: 0.75rem;
  }
  .slider__first .slide .right__text {
    width: 100px;
  }
  .media {
    margin-bottom: 50px;
  }
  .tahograph {
    gap: 30px;
  }
  .tahograph {
    margin-bottom: 50px;
  }
  .tahograph .tahograph__text .tahograph__title {
    margin-bottom: 10px;
  }
  .glonas {
    margin-bottom: 50px;
  }
  .glonas .glonas__text .glonas__title {
    margin-bottom: 10px;
  }
  .punktTo {
    gap: 30px;
  }
  .punktTo {
    margin-bottom: 50px;
  }
  .punktTo .punktTo__text .punktTo__title {
    margin-bottom: 10px;
  }
}

@media (max-width: 370px) {
  .slider__first {
    margin-bottom: 30px;
  }
  .slider__first .slide .left__text .slide__text {
    font-size: 1rem;
  }
  .slider__second {
    margin-bottom: 30px;
  }
}

@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    scroll-behavior: auto !important;
    transition-duration: 0.01ms !important;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
